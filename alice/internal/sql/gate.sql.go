// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gate.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const gateOne = `-- name: GateOne :one
SELECT id, name, phone, created_at, updated_at, coordinates, number, delay, cctv_id, cctv_preview_rate
FROM public.gate
WHERE id = $1
`

type GateOneParams struct {
	ID pgtype.UUID `db:"id" json:"id"`
}

func (q *Queries) GateOne(ctx context.Context, arg GateOneParams) (Gate, error) {
	row := q.db.QueryRow(ctx, gateOne, arg.ID)
	var i Gate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Coordinates,
		&i.Number,
		&i.Delay,
		&i.CctvID,
		&i.CctvPreviewRate,
	)
	return i, err
}

const gateOpenInsert = `-- name: GateOpenInsert :one
INSERT INTO public.gate_open (gate_id,
                              reason_id,
                              source)
VALUES ($1,
        $2,
        $3)
RETURNING id, gate_id, reason_id, source, comment, created_at, updated_at, person_id
`

type GateOpenInsertParams struct {
	GateID   pgtype.UUID `db:"gate_id" json:"gate_id"`
	ReasonID string      `db:"reason_id" json:"reason_id"`
	Source   string      `db:"source" json:"source"`
}

func (q *Queries) GateOpenInsert(ctx context.Context, arg GateOpenInsertParams) (GateOpen, error) {
	row := q.db.QueryRow(ctx, gateOpenInsert, arg.GateID, arg.ReasonID, arg.Source)
	var i GateOpen
	err := row.Scan(
		&i.ID,
		&i.GateID,
		&i.ReasonID,
		&i.Source,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PersonID,
	)
	return i, err
}

const gates = `-- name: Gates :many
SELECT id, name, phone, created_at, updated_at, coordinates, number, delay, cctv_id, cctv_preview_rate
FROM public.gate
`

func (q *Queries) Gates(ctx context.Context) ([]Gate, error) {
	rows, err := q.db.Query(ctx, gates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gate
	for rows.Next() {
		var i Gate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Coordinates,
			&i.Number,
			&i.Delay,
			&i.CctvID,
			&i.CctvPreviewRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
