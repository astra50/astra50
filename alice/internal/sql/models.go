// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sql

import (
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type Account struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Number    string             `db:"number" json:"number"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	PersonID  pgtype.UUID        `db:"person_id" json:"person_id"`
	Balance   pgtype.Numeric     `db:"balance" json:"balance"`
	BalanceAt pgtype.Timestamptz `db:"balance_at" json:"balance_at"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	EndAt     pgtype.Date        `db:"end_at" json:"end_at"`
}

type AccountLand struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	LandID    pgtype.UUID        `db:"land_id" json:"land_id"`
	AccountID pgtype.UUID        `db:"account_id" json:"account_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type AccountPerson struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	PersonID  pgtype.UUID        `db:"person_id" json:"person_id"`
	AccountID pgtype.UUID        `db:"account_id" json:"account_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

// History of auditable actions on audited tables, from audit.if_modified_func()
type AuditLoggedAction struct {
	// Unique identifier for each auditable event
	EventID int64 `db:"event_id" json:"event_id"`
	// Database schema audited table for this event is in
	SchemaName string `db:"schema_name" json:"schema_name"`
	// Non-schema-qualified table name of table event occured in
	TableName string `db:"table_name" json:"table_name"`
	// Table OID. Changes with drop/create. Get with 'tablename'::regclass
	Relid pgtype.Uint32 `db:"relid" json:"relid"`
	// Login / session user whose statement caused the audited event
	SessionUserName pgtype.Text `db:"session_user_name" json:"session_user_name"`
	HasuraUser      []byte      `db:"hasura_user" json:"hasura_user"`
	// Transaction start timestamp for tx in which audited event occurred
	ActionTstampTx pgtype.Timestamptz `db:"action_tstamp_tx" json:"action_tstamp_tx"`
	// Statement start timestamp for tx in which audited event occurred
	ActionTstampStm pgtype.Timestamptz `db:"action_tstamp_stm" json:"action_tstamp_stm"`
	// Wall clock time at which audited event's trigger call occurred
	ActionTstampClk pgtype.Timestamptz `db:"action_tstamp_clk" json:"action_tstamp_clk"`
	// Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.
	TransactionID pgtype.Int8 `db:"transaction_id" json:"transaction_id"`
	// Application name set when this audit event occurred. Can be changed in-session by client.
	ApplicationName pgtype.Text `db:"application_name" json:"application_name"`
	// IP address of client that issued query. Null for unix domain socket.
	ClientAddr *netip.Addr `db:"client_addr" json:"client_addr"`
	// Remote peer IP port address of client that issued query. Undefined for unix socket.
	ClientPort pgtype.Int4 `db:"client_port" json:"client_port"`
	// Top-level query that caused this auditable event. May be more than one statement.
	ClientQuery pgtype.Text `db:"client_query" json:"client_query"`
	// Action type; I = insert, D = delete, U = update, T = truncate
	Action string `db:"action" json:"action"`
	// Record value. Null for statement-level trigger. For INSERT this is the new tuple. For DELETE and UPDATE it is the old tuple.
	RowData []byte `db:"row_data" json:"row_data"`
	// New values of fields changed by UPDATE. Null except for row-level UPDATE events.
	ChangedFields []byte `db:"changed_fields" json:"changed_fields"`
	// 't' if audit event is from an FOR EACH STATEMENT trigger, 'f' for FOR EACH ROW
	StatementOnly bool        `db:"statement_only" json:"statement_only"`
	UserID        pgtype.UUID `db:"user_id" json:"user_id"`
}

type AuditTable struct {
	ID string `db:"id" json:"id"`
}

type Cctv struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	Url       pgtype.Text        `db:"url" json:"url"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Preview   pgtype.Text        `db:"preview" json:"preview"`
}

type Contact struct {
	ID          pgtype.UUID        `db:"id" json:"id"`
	Name        string             `db:"name" json:"name"`
	Description pgtype.Text        `db:"description" json:"description"`
	Comment     pgtype.Text        `db:"comment" json:"comment"`
	Phone       interface{}        `db:"phone" json:"phone"`
	Site        pgtype.Text        `db:"site" json:"site"`
	IsPublic    pgtype.Bool        `db:"is_public" json:"is_public"`
	Position    pgtype.Int4        `db:"position" json:"position"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Contractor struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Gate struct {
	ID              pgtype.UUID        `db:"id" json:"id"`
	Name            string             `db:"name" json:"name"`
	Phone           pgtype.Text        `db:"phone" json:"phone"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Coordinates     pgtype.Point       `db:"coordinates" json:"coordinates"`
	Number          pgtype.Int4        `db:"number" json:"number"`
	Delay           int32              `db:"delay" json:"delay"`
	CctvID          pgtype.UUID        `db:"cctv_id" json:"cctv_id"`
	CctvPreviewRate int32              `db:"cctv_preview_rate" json:"cctv_preview_rate"`
}

type GateOpen struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	GateID    pgtype.UUID        `db:"gate_id" json:"gate_id"`
	ReasonID  string             `db:"reason_id" json:"reason_id"`
	Source    string             `db:"source" json:"source"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	PersonID  pgtype.UUID        `db:"person_id" json:"person_id"`
}

type GateOpenReason struct {
	ID        string             `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type HdbCatalogEventInvocationLog struct {
	ID          string           `db:"id" json:"id"`
	EventID     pgtype.Text      `db:"event_id" json:"event_id"`
	Status      pgtype.Int4      `db:"status" json:"status"`
	Request     []byte           `db:"request" json:"request"`
	Response    []byte           `db:"response" json:"response"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	TriggerName pgtype.Text      `db:"trigger_name" json:"trigger_name"`
}

type HdbCatalogEventLog struct {
	ID          string             `db:"id" json:"id"`
	SchemaName  string             `db:"schema_name" json:"schema_name"`
	TableName   string             `db:"table_name" json:"table_name"`
	TriggerName string             `db:"trigger_name" json:"trigger_name"`
	Payload     []byte             `db:"payload" json:"payload"`
	Delivered   bool               `db:"delivered" json:"delivered"`
	Error       bool               `db:"error" json:"error"`
	Tries       int32              `db:"tries" json:"tries"`
	CreatedAt   pgtype.Timestamp   `db:"created_at" json:"created_at"`
	Locked      pgtype.Timestamptz `db:"locked" json:"locked"`
	NextRetryAt pgtype.Timestamp   `db:"next_retry_at" json:"next_retry_at"`
	Archived    bool               `db:"archived" json:"archived"`
}

type HdbCatalogHdbEventLogCleanup struct {
	ID                         string           `db:"id" json:"id"`
	TriggerName                string           `db:"trigger_name" json:"trigger_name"`
	ScheduledAt                pgtype.Timestamp `db:"scheduled_at" json:"scheduled_at"`
	DeletedEventLogs           pgtype.Int4      `db:"deleted_event_logs" json:"deleted_event_logs"`
	DeletedEventInvocationLogs pgtype.Int4      `db:"deleted_event_invocation_logs" json:"deleted_event_invocation_logs"`
	Status                     string           `db:"status" json:"status"`
}

type HdbCatalogHdbSourceCatalogVersion struct {
	Version    string             `db:"version" json:"version"`
	UpgradedOn pgtype.Timestamptz `db:"upgraded_on" json:"upgraded_on"`
}

// Земельные участки
type Land struct {
	ID              pgtype.UUID        `db:"id" json:"id"`
	StreetID        pgtype.UUID        `db:"street_id" json:"street_id"`
	Number          pgtype.Text        `db:"number" json:"number"`
	CadastralNumber pgtype.Text        `db:"cadastral_number" json:"cadastral_number"`
	Square          pgtype.Numeric     `db:"square" json:"square"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	NumberInteger   pgtype.Int4        `db:"number_integer" json:"number_integer"`
	Coordinates     pgtype.Point       `db:"coordinates" json:"coordinates"`
	Polygon         pgtype.Polygon     `db:"polygon" json:"polygon"`
}

type Me struct {
	ID                  pgtype.UUID        `db:"id" json:"id"`
	Firstname           pgtype.Text        `db:"firstname" json:"firstname"`
	Lastname            pgtype.Text        `db:"lastname" json:"lastname"`
	Middlename          pgtype.Text        `db:"middlename" json:"middlename"`
	BirthDate           pgtype.Date        `db:"birth_date" json:"birth_date"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Balance             pgtype.Numeric     `db:"balance" json:"balance"`
	BalanceAt           pgtype.Timestamptz `db:"balance_at" json:"balance_at"`
	TelegramID          pgtype.Text        `db:"telegram_id" json:"telegram_id"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	LastPaidAmount      pgtype.Numeric     `db:"last_paid_amount" json:"last_paid_amount"`
	LastPaidAt          pgtype.Date        `db:"last_paid_at" json:"last_paid_at"`
	Comment             pgtype.Text        `db:"comment" json:"comment"`
	EnteredAt           pgtype.Date        `db:"entered_at" json:"entered_at"`
	EnteredDocument     pgtype.Text        `db:"entered_document" json:"entered_document"`
	PassportSerial      pgtype.Text        `db:"passport_serial" json:"passport_serial"`
	PassportNumber      pgtype.Text        `db:"passport_number" json:"passport_number"`
	PassportIssuedBy    pgtype.Text        `db:"passport_issued_by" json:"passport_issued_by"`
	PassportIssuedDate  pgtype.Date        `db:"passport_issued_date" json:"passport_issued_date"`
	PassportIssuedCode  pgtype.Text        `db:"passport_issued_code" json:"passport_issued_code"`
	RegistrationAddress pgtype.Text        `db:"registration_address" json:"registration_address"`
	FullName            string             `db:"full_name" json:"full_name"`
	UserID              pgtype.UUID        `db:"user_id" json:"user_id"`
}

type MemberDiscount struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	AccountID pgtype.UUID        `db:"account_id" json:"account_id"`
	RateID    pgtype.UUID        `db:"rate_id" json:"rate_id"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

// Членские взносы
type MemberPayment struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	PersonID  pgtype.UUID        `db:"person_id" json:"person_id"`
	Amount    pgtype.Numeric     `db:"amount" json:"amount"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	LandID    pgtype.UUID        `db:"land_id" json:"land_id"`
	RateID    pgtype.UUID        `db:"rate_id" json:"rate_id"`
	Rate      pgtype.Int4        `db:"rate" json:"rate"`
	PaidAt    pgtype.Date        `db:"paid_at" json:"paid_at"`
	// Флаг автоматического начисления взносов
	IsRegular  bool               `db:"is_regular" json:"is_regular"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	AccountID  pgtype.UUID        `db:"account_id" json:"account_id"`
	IsDiscount pgtype.Bool        `db:"is_discount" json:"is_discount"`
	Balance    pgtype.Numeric     `db:"balance" json:"balance"`
}

// Ставка членских взносов
type MemberRate struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Amount    int32              `db:"amount" json:"amount"`
	Since     pgtype.Date        `db:"since" json:"since"`
	Until     pgtype.Date        `db:"until" json:"until"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Discount  int32              `db:"discount" json:"discount"`
}

type PaymentWithRefinanceRate struct {
	Date      pgtype.Date    `db:"date" json:"date"`
	Rate      pgtype.Numeric `db:"rate" json:"rate"`
	Amount    pgtype.Numeric `db:"amount" json:"amount"`
	Balance   pgtype.Numeric `db:"balance" json:"balance"`
	Type      string         `db:"type" json:"type"`
	AccountID pgtype.UUID    `db:"account_id" json:"account_id"`
}

// Члены СНТ
type Person struct {
	ID                  pgtype.UUID        `db:"id" json:"id"`
	Firstname           pgtype.Text        `db:"firstname" json:"firstname"`
	Lastname            pgtype.Text        `db:"lastname" json:"lastname"`
	Middlename          pgtype.Text        `db:"middlename" json:"middlename"`
	BirthDate           pgtype.Date        `db:"birth_date" json:"birth_date"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Balance             pgtype.Numeric     `db:"balance" json:"balance"`
	BalanceAt           pgtype.Timestamptz `db:"balance_at" json:"balance_at"`
	TelegramID          pgtype.Text        `db:"telegram_id" json:"telegram_id"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	LastPaidAmount      pgtype.Numeric     `db:"last_paid_amount" json:"last_paid_amount"`
	LastPaidAt          pgtype.Date        `db:"last_paid_at" json:"last_paid_at"`
	Comment             pgtype.Text        `db:"comment" json:"comment"`
	EnteredAt           pgtype.Date        `db:"entered_at" json:"entered_at"`
	EnteredDocument     pgtype.Text        `db:"entered_document" json:"entered_document"`
	PassportSerial      pgtype.Text        `db:"passport_serial" json:"passport_serial"`
	PassportNumber      pgtype.Text        `db:"passport_number" json:"passport_number"`
	PassportIssuedBy    pgtype.Text        `db:"passport_issued_by" json:"passport_issued_by"`
	PassportIssuedDate  pgtype.Date        `db:"passport_issued_date" json:"passport_issued_date"`
	PassportIssuedCode  pgtype.Text        `db:"passport_issued_code" json:"passport_issued_code"`
	RegistrationAddress pgtype.Text        `db:"registration_address" json:"registration_address"`
	FullName            string             `db:"full_name" json:"full_name"`
	UserID              pgtype.UUID        `db:"user_id" json:"user_id"`
}

type PersonEmail struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Email     interface{}        `db:"email" json:"email"`
	PersonID  pgtype.UUID        `db:"person_id" json:"person_id"`
	IsMain    bool               `db:"is_main" json:"is_main"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type PersonPhone struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Phone     interface{}        `db:"phone" json:"phone"`
	PersonID  pgtype.UUID        `db:"person_id" json:"person_id"`
	IsMain    bool               `db:"is_main" json:"is_main"`
	Comment   pgtype.Text        `db:"comment" json:"comment"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type PersonalAccessToken struct {
	ID         pgtype.UUID        `db:"id" json:"id"`
	Name       string             `db:"name" json:"name"`
	Token      pgtype.Text        `db:"token" json:"token"`
	GateAccess bool               `db:"gate_access" json:"gate_access"`
	PersonID   pgtype.UUID        `db:"person_id" json:"person_id"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type RefinanceRate struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Rate      pgtype.Numeric     `db:"rate" json:"rate"`
	Since     pgtype.Date        `db:"since" json:"since"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

// Улицы
type Street struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

// Статьи целевых взносов
type Target struct {
	ID            pgtype.UUID        `db:"id" json:"id"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Name          string             `db:"name" json:"name"`
	Comment       pgtype.Text        `db:"comment" json:"comment"`
	InitialAmount pgtype.Numeric     `db:"initial_amount" json:"initial_amount"`
	// Целевая сумма
	TotalAmount     pgtype.Numeric     `db:"total_amount" json:"total_amount"`
	PayerAmount     pgtype.Numeric     `db:"payer_amount" json:"payer_amount"`
	CurrentAmount   pgtype.Numeric     `db:"current_amount" json:"current_amount"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	IsPublic        bool               `db:"is_public" json:"is_public"`
	Lands           []byte             `db:"lands" json:"lands"`
	IncrementAmount pgtype.Numeric     `db:"increment_amount" json:"increment_amount"`
	DecrementAmount pgtype.Numeric     `db:"decrement_amount" json:"decrement_amount"`
}

// Целевые взносы
type TargetPayment struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	PersonID     pgtype.UUID        `db:"person_id" json:"person_id"`
	LandID       pgtype.UUID        `db:"land_id" json:"land_id"`
	Comment      pgtype.Text        `db:"comment" json:"comment"`
	Amount       int64              `db:"amount" json:"amount"`
	TargetID     pgtype.UUID        `db:"target_id" json:"target_id"`
	PaidAt       pgtype.Date        `db:"paid_at" json:"paid_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ContractorID pgtype.UUID        `db:"contractor_id" json:"contractor_id"`
}

type User struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Username  string             `db:"username" json:"username"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
