version: '3.7'

services:
  postgres:
    image: postgres:14.2-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - type: bind
        source: ../../data/astra50/postgres/data
        target: /var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres_backup:
    image: postgres:14.2-alpine
    restart: always
    entrypoint: /bin/sh
    command:
      - -c
      - |
        apk add --no-cache tini gzip \
        && echo $$'
        postgres:5432:crm-hasura:${POSTGRES_USER}:${POSTGRES_PASSWORD}
        postgres:5432:crm:${POSTGRES_USER}:${POSTGRES_PASSWORD}
        postgres:5432:n8n:${POSTGRES_USER}:${POSTGRES_PASSWORD}
        ' > ~/.pgpass \
        && chmod 600 ~/.pgpass \
        && echo $$'
        10 3 * * * pg_dump -h postgres -U ${POSTGRES_USER} crm-hasura | gzip > /backups/$$(date +"%Y%m%d_%H%M%S")_crm-hasura.sql.gz
        15 3 * * * pg_dump -h postgres -U ${POSTGRES_USER} crm | gzip > /backups/$$(date +"%Y%m%d_%H%M%S")_crm.sql.gz
        20 3 * * * pg_dump -h postgres -U ${POSTGRES_USER} n8n | gzip > /backups/$$(date +"%Y%m%d_%H%M%S")_n8n.sql.gz
        ' | crontab - \
        && exec tini -- crond -l 0 -f
    volumes:
      - ../../backups:/backups
    healthcheck:
      disable: true

  redis:
    image: redis:6.2.5-alpine
    restart: always
    volumes:
      - type: bind
        source: ../../data/astra50/redis/data
        target: /data

  hasura:
    restart: always
    build:
      context: ./hasura
      target: hasura
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astra50-hasura.rule=Host(`api.astra50.ru`)"
      - "traefik.http.routers.astra50-hasura.entrypoints=websecure"
      - "traefik.http.routers.astra50-hasura.tls=true"
      - "traefik.http.routers.astra50-hasura.tls.certresolver=leresolver"
      - "traefik.http.services.astra50-hasura-service.loadbalancer.server.port=80"
    command:
      - graphql-engine
      - serve
      - --server-port=80
      - --unauthorized-role=anonymous
      - --cors-domain=*
      - --admin-internal-errors=true
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/crm
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/crm-hasura
      HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://sso.astra50.ru/auth/realms/astra50/protocol/openid-connect/certs"}'
      HASURA_GRAPHQL_ADMIN_SECRET: ${CRM_HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_EVENT_SECRET: ${HASURA_EVENT_SECRET}
      HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS: 'false'
      HASURA_GRAPHQL_MIGRATIONS_DIR: /data/migrations
      HASURA_GRAPHQL_METADATA_DIR: /data/metadata
    volumes:
      - ./hasura:/data:ro
    networks:
      - default
      - traefik

  crm:
    restart: always
    build:
      context: crm
      target: nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astra50-crm.rule=Host(`crm.astra50.ru`)"
      - "traefik.http.routers.astra50-crm.entrypoints=websecure"
      - "traefik.http.routers.astra50-crm.tls=true"
      - "traefik.http.routers.astra50-crm.tls.certresolver=leresolver"
      - "traefik.http.services.astra50-crm-service.loadbalancer.server.port=80"
    networks:
      - traefik

  sneg:
    restart: always
    build:
      context: sneg
      target: nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astra50-sneg.rule=Host(`sneg.astra50.ru`)"
      - "traefik.http.routers.astra50-sneg.entrypoints=websecure"
      - "traefik.http.routers.astra50-sneg.tls=true"
      - "traefik.http.routers.astra50-sneg.tls.certresolver=leresolver"
      - "traefik.http.services.astra50-sneg-service.loadbalancer.server.port=80"
    networks:
      - traefik

  n8n:
    image: n8nio/n8n:0.152.0
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astra50-n8n-webhook.rule=Host(`workflow.astra50.ru`) && (PathPrefix(`/webhook`) || PathPrefix(`/webhook-test`))"
      - "traefik.http.routers.astra50-n8n-webhook.entrypoints=websecure"
      - "traefik.http.routers.astra50-n8n-webhook.tls=true"
      - "traefik.http.routers.astra50-n8n-webhook.tls.certresolver=leresolver"
      - "traefik.http.services.astra50-n8n-webhook-service.loadbalancer.server.port=5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_SCHEMA: public
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      GENERIC_TIMEZONE: Europe/Moscow
      TZ: Europe/Moscow
      WEBHOOK_URL: https://workflow.astra50.ru
      NODE_ENV: production
      EXECUTIONS_PROCESS: main
      EXECUTIONS_DATA_PRUNE: 'true'
      EXECUTIONS_DATA_MAX_AGE: 8760
      N8N_DIAGNOSTICS_ENABLED: 'false'
      NODE_FUNCTION_ALLOW_BUILTIN: '*'
      NODE_FUNCTION_ALLOW_EXTERNAL: '*'
    networks:
      - traefik
      - default
    volumes:
      - ../../data/astra50/n8n/data:/home/node/.n8n
    healthcheck:
      test: nc -z 127.0.0.1 5678
      start_period: 5s
      interval: 5s

  n8n-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.0
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astra50-n8n.rule=Host(`workflow.astra50.ru`) && !PathPrefix(`/webhook`) && !PathPrefix(`/webhook-test`)"
      - "traefik.http.routers.astra50-n8n.entrypoints=websecure"
      - "traefik.http.routers.astra50-n8n.tls=true"
      - "traefik.http.routers.astra50-n8n.tls.certresolver=leresolver"
      - "traefik.http.services.astra50-n8n-service.loadbalancer.server.port=80"
    command:
      - --http-address=:80
      - --reverse-proxy=true
      - --cookie-secret=${OAUTH2_PROXY_DEVOPS_COOKIE_SECRET}
      - --session-store-type=redis
      - --redis-connection-url=redis://redis:6379/2
      - --email-domain=*
      - --allowed-group=admin
      - --provider=keycloak
      - --skip-provider-button=true
      - --scope=openid
      - --client-id=${OAUTH2_PROXY_DEVOPS_CLIENT_ID}
      - --client-secret=${OAUTH2_PROXY_DEVOPS_CLIENT_SECRET}
      - --login-url=https://sso.astra50.ru/auth/realms/astra50/protocol/openid-connect/auth
      - --redeem-url=https://sso.astra50.ru/auth/realms/astra50/protocol/openid-connect/token
      - --profile-url=https://sso.astra50.ru/auth/realms/astra50/protocol/openid-connect/userinfo
      - --validate-url=https://sso.astra50.ru/auth/realms/astra50/protocol/openid-connect/userinfo
    environment:
      OAUTH2_PROXY_UPSTREAMS: http://n8n.astra50:5678
      OAUTH2_PROXY_REDIRECT_URL: https://workflow.astra50.ru/oauth2/callback
    networks:
      - default
      - traefik

networks:
  default:
    name: astra50
  traefik:
    external: true
    name: traefik
